* PCESK
This is an implementation of an abstract CESK machine which will
support of parallel constructs (spawn/join), based on Matt Might's
description of CESK machines (mainly from the papers [[http://matt.might.net/papers/vanhorn2010abstract.pdf][Abstracting
Abstract Machines]] and [[http://matt.might.net/papers/might2011pceks.pdf][A Family of Abstract Interpretations for Static
Analysis of Concurrent Higher-Order Programming]])
** Dependencies and compilation
The following OCaml packages are required:
  - ocamlgraph
  - oUnit
  - batteries

Those packages are installable using [[http://opam.ocamlpro.com/][OPAM]]:
#+BEGIN_SRC shell
opam install ocamlgraph oUnit batteries
#+END_SRC

To compile this project, you'll also need ocamlbuild (generally
provided with ocaml). It has been tested with OCaml 4.01, but should
probably work with older versions too. To compile, simply launch
=make=. To launch the test suite, execute =make test=.
** Usage
#+BEGIN_SRC shell
$ ./main.byte -help
usage: ./main.byte [-v] [-i input] [-g graph_output]
  -v : verbose mode (disable by default)
  -i : input file (stdin by default)
  -g : output file for the generated graph (nothing by default)
  -help  Display this list of options
  --help  Display this list of options
#+END_SRC

When the verbose mode is activated, it will also print a trace of the
states computed (before the results), with eval states being printed
in red, and continuation states being printed in green.

When a graph output file is given (=-g=), a graph of the computed
states will be output in this file, using Graphviz's dot format. An
image file can then be generated (=dot -Tpng foo.dot > foo.png=)

Finally, the results computed will be printed, one per line (multiple
results can computed). Generally, those different results will be
merged together to obtain a unique result.

For example:
#+BEGIN_SRC shell
$ echo '(begin (define f (lambda (x) x)) (f 0))' > foo.scm
$ ./main.byte -i foo.scm
0
#+END_SRC
** Stuff to do
  - Add more complex examples (church numerals, â€¦)
  - Support multiple threads of execution
  - Add parallel operators (spawn, join)
